import{_ as e,c as t,o,a as i}from"./app.b8337294.js";const f=JSON.parse('{"title":"Q2","description":"","frontmatter":{},"headers":[],"relativePath":"youngwon/Mission 02/quest02.md"}'),n={name:"youngwon/Mission 02/quest02.md"},l=i('<h1 id="q2" tabindex="-1">Q2 <a class="header-anchor" href="#q2" aria-hidden="true">#</a></h1><ol><li><p>CSS\uB97C HTML\uC5D0 \uC801\uC6A9\uD558\uB294 \uC138 \uAC00\uC9C0 \uBC29\uBC95\uC740 \uBB34\uC5C7\uC77C\uAE4C\uC694? \uC138 \uAC00\uC9C0 \uBC29\uBC95 \uAC01\uAC01\uC758 \uC7A5\uB2E8\uC810\uC740 \uBB34\uC5C7\uC77C\uAE4C\uC694? Inline - declared with html attributes Pros: Quick and useful for testing Cons: Must style each element individually. Can make code look messy Internal - declared inside the same html file. Must use the <code>&lt;style&gt;</code> tag Pros: Class and ID selectors can be used Cons: Ok for a single page but too time consuming for multiple pages and increase loading time and space External: - declared and called from an external file Pros: You can edit the whole site in just one file Cons: Pages may not be rendered correctly if css is not loaded</p></li><li><p>CSS \uADDC\uCE59\uC758 \uC6B0\uC120\uC21C\uC704\uB294 \uC5B4\uB5BB\uAC8C \uACB0\uC815\uB420\uAE4C\uC694?</p><ol><li>Inline CSS overrides all other stylings</li><li>A specific selector (choosing a specific element as opposed to general element (i.e. class vs no class))</li><li>Rules that appear later take precedence</li><li>External CSS</li><li>CSS with !important tag</li></ol></li><li><p>CSS\uC758 \uBC15\uC2A4\uBAA8\uB378\uC740 \uBB34\uC5C7\uC77C\uAE4C\uC694? \uBC15\uC2A4\uAC00 \uD654\uBA74\uC5D0\uC11C \uCC28\uC9C0\uD558\uB294 \uD06C\uAE30\uB294 \uC5B4\uB5BB\uAC8C \uACB0\uC815\uB420\uAE4C\uC694? A: A box that wraps around every html element. B: width and height of the content</p></li><li><p>float \uC18D\uC131\uC740 \uC65C \uC88B\uC9C0 \uC54A\uC744\uAE4C\uC694? A: When you move elements, other elements wrap around the shifted elemented. This could cause problems with difference aspect ratios and different browsers and your website might not look as intended</p></li><li><p>Flexbox(Flexible box)\uC640 CSS Grid\uC758 \uCC28\uC774\uC640 \uC7A5\uB2E8\uC810\uC740 \uBB34\uC5C7\uC77C\uAE4C\uC694? A: Flex box is designed for layout in one dimension, either row or column B: Grid is designed for layout in two dimensions, both row and column</p></li><li><p>CSS\uC758 \uBE44\uC2B7\uD55C \uC694\uC18C\uB4E4\uC744 \uC5B4\uB5A4 \uC2DD\uC73C\uB85C \uC815\uB9AC\uD560 \uC218 \uC788\uC744\uAE4C\uC694? A: Commenting B: Spacing differently C: Create different sections for each type i.e. <code>&lt;body&gt;</code> <code>&lt;p&gt;</code> <code>&lt;h1&gt;</code> etc. D: Have utility CSS at the bottom E: OOCSS F: BEM (Block Element Modifier) G: Different Style Sheets</p></li></ol>',2),s=[l];function a(r,d,c,h,p,m){return o(),t("div",null,s)}const S=e(n,[["render",a]]);export{f as __pageData,S as default};
